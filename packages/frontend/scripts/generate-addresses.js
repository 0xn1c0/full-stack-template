import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

// Chains we care about
const chains = [
  { name: 'confluxESpace', chainId: 1030 },
  { name: 'confluxESpaceTestnet', chainId: 71 },
  { name: 'confluxESpaceLocal', chainId: 2030 },
]

// Contract names to extract (keep in sync with your ABIs in src/generated.ts)
const contracts = ['AccessControl', 'BasicCounter', 'DataTypesDemo', 'Lock']

const output = {}

chains.forEach(({ chainId }) => {
  const deployedPath = path.join(
    __dirname,
    '..',
    '..',
    'hardhat_espace',
    'ignition',
    'deployments',
    `chain-${chainId}`,
    'deployed_addresses.json'
  )

  let raw = {}
  if (fs.existsSync(deployedPath)) {
    try {
      raw = JSON.parse(fs.readFileSync(deployedPath, 'utf8'))
    } catch (e) {
      console.warn(`warning: failed to parse ${deployedPath}: ${e.message}`)
      raw = {}
    }
  }

  // Normalize names: keys may be like "BasicConceptsModule#BasicCounter"
  const byName = {}
  Object.entries(raw).forEach(([k, v]) => {
    const parts = String(k).split('#')
    const name = parts[parts.length - 1] || k
    byName[name] = v
  })

  output[chainId] = {}
  contracts.forEach(c => {
    output[chainId][c] = byName[c] || '0x0000000000000000000000000000000000000000'
  })
})

// Ensure destination dir
const jsonOut = path.join(__dirname, '..', 'src', 'contracts', 'addresses.json')
fs.mkdirSync(path.dirname(jsonOut), { recursive: true })
fs.writeFileSync(jsonOut, JSON.stringify(output, null, 2))

// Also emit a small TypeScript helper for convenience in the frontend
const tsOut = path.join(__dirname, '..', 'src', 'generated-addresses.ts')
const tsContent = `// Auto-generated by scripts/generate-addresses.js
export const contractAddresses = ${JSON.stringify(output, null, 2)} as const

export type ContractAddresses = typeof contractAddresses
`
fs.writeFileSync(tsOut, tsContent)

console.log('Generated addresses JSON ->', jsonOut)
console.log('Generated TypeScript ->', tsOut)